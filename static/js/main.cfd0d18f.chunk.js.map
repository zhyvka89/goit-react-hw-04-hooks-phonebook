{"version":3,"sources":["components/Form/Form.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","components/Container/Container.js","components/Layout/Layout.js","components/Form/Form.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","hooks/useLocalStorage.js","index.js"],"names":["module","exports","Container","children","className","style","container","Layout","Form","onSubmit","useState","contactName","setContactName","number","setNumber","handleInputChange","event","currentTarget","name","value","reset","styles","form","preventDefault","label","input","type","pattern","title","onChange","required","button","Filter","ContactList","data","onDeleteContact","list","map","id","phonenumber","onClick","App","key","defaultValue","JSON","parse","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","contacts","setContacts","filter","setFilter","text","contact","uuidv4","find","toLowerCase","alert","prev","normalizedFilter","includes","getFilteredContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfd0d18f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2YE_q\",\"label\":\"Form_label__3OSlN\",\"input\":\"Form_input__14Mfi\",\"button\":\"Form_button__29dNZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2Qv-P\",\"phonenumber\":\"ContactList_phonenumber__3CBeu\",\"button\":\"ContactList_button__29nuT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1gvgt\",\"input\":\"Filter_input__2LatP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1g2MZ\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport style from './Container.module.css';\n\nconst Container = ({ children }) => {\n  return <div className={style.container}>{children}</div>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Container from '../Container/Container';\n\nconst Layout = ({ children }) => (\n  <>\n    <Container>{children}</Container>\n  </>\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","import { useState } from 'react';\nimport styles from './Form.module.css';\n\nexport default function Form({ onSubmit }) {\n  const [contactName, setContactName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setContactName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit(contactName, number);\n    reset();\n  };\n\n  const reset = () => {\n    setContactName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.label}>\n        Name\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          value={contactName}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          onChange={handleInputChange}\n          required\n        />\n      </label>\n      <label className={styles.label}>\n        Phone Number\n        <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          onChange={handleInputChange}\n          required\n        />\n      </label>\n      <button className={styles.button} type=\"submit\">\n        Add Contact\n      </button>\n    </form>\n  );\n}\n\n// class Form extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleInputChange = event => {\n//     const { name, value } = event.currentTarget;\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   handleSubmit = event => {\n//     event.preventDefault();\n//     const { name, number } = this.state;\n//     this.props.onSubmit(name, number);\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({\n//       name: '',\n//       number: '',\n//     });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n\n//     return (\n//       <form className={styles.form} onSubmit={this.handleSubmit}>\n//         <label className={styles.label}>\n//           Name\n//           <input\n//             className={styles.input}\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             onChange={this.handleInputChange}\n//             required\n//           />\n//         </label>\n//         <label className={styles.label}>\n//           Phone Number\n//           <input\n//             className={styles.input}\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             onChange={this.handleInputChange}\n//             required\n//           />\n//         </label>\n//         <button className={styles.button} type=\"submit\">\n//           Add Contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// export default Form;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label className={styles.label}>\n      Find contacts by name\n      <input\n        className={styles.input}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactList.module.css';\n\nconst ContactList = ({ data, onDeleteContact }) => {\n  return (\n    <ol className={styles.list}>\n      {data.map(({ id, name, number }) => {\n        return (\n          <li key={id}>\n            {name}: <span className={styles.phonenumber}>{number}</span>\n            <button\n              type=\"button\"\n              className={styles.button}\n              onClick={() => onDeleteContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ol>\n  );\n};\n\nContactList.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { useState } from 'react';\n\nimport Layout from './components/Layout/Layout';\nimport Form from './components/Form';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nimport useLocalStorage from './hooks/useLocalStorage';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default function App() {\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\n  const [filter, setFilter] = useState('');\n\n  const addContact = (text, number) => {\n    const contact = {\n      name: text,\n      number,\n      id: uuidv4(),\n    };\n\n    const isExistedName = contacts.find(\n      contact => contact.name.toLowerCase() === text.toLowerCase(),\n    );\n    if (isExistedName) {\n      alert(text + ' is already in your contacts');\n      return;\n    }\n\n    setContacts(prev => [contact, ...prev]);\n  };\n\n  const deleteContact = contactId => {\n    setContacts(prev => {\n      return prev.filter(contact => contact.id !== contactId);\n    });\n  };\n\n  const handleFilter = event => {\n    setFilter(event.currentTarget.value);\n  };\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n    return filteredContacts;\n  };\n\n  return (\n    <Layout>\n      <h1>PhoneBook</h1>\n      <Form onSubmit={addContact} />\n\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={handleFilter} />\n      <ContactList\n        data={getFilteredContacts()}\n        onDeleteContact={deleteContact}\n      />\n    </Layout>\n  );\n}\n// class App extends Component {\n//   state = {\n//     contacts: [\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = contacts === null ? [] : JSON.parse(contacts);\n//     this.setState({ contacts: parsedContacts });\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   addContact = (text, number) => {\n//     const contact = {\n//       name: text,\n//       number,\n//       id: uuidv4(),\n//     };\n\n//     const isExistedName = this.state.contacts.find(\n//       contact => contact.name.toLowerCase() === text.toLowerCase(),\n//     );\n//     if (isExistedName) {\n//       alert(text + ' is already in your contacts');\n//       return;\n//     }\n\n//     this.setState(({ contacts }) => ({\n//       contacts: [contact, ...contacts],\n//     }));\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   handleFilter = event => {\n//     this.setState({ filter: event.currentTarget.value });\n//   };\n\n//   getFilteredContacts = () => {\n//     const { contacts, filter } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n//     const filteredContacts = contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//     return filteredContacts;\n//   };\n\n//   render() {\n//     console.log('render');\n//     return (\n//       <Layout>\n//         <h1>PhoneBook</h1>\n//         <Form onSubmit={this.addContact} />\n\n//         <h2>Contacts</h2>\n//         <Filter value={this.state.filter} onChange={this.handleFilter} />\n//         <ContactList\n//           data={this.getFilteredContacts()}\n//           onDeleteContact={this.deleteContact}\n//         />\n//       </Layout>\n//     );\n//   }\n// }\n","import { useEffect, useState } from 'react';\n\nexport default function useLocalStorage(key, defaultValue) {\n  const [state, setState] = useState(\n    () => JSON.parse(localStorage.getItem(key)) ?? defaultValue,\n  );\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}